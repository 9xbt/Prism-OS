Canvas.DrawString(15, 15, "VBE Version: " + Cosmos.Core.VBE.getControllerInfo().vbeVersion, Color.White);
Canvas.DrawString(15, 15, "Total VRAM: " + Cosmos.Core.VBE.getControllerInfo().totalmemory, Color.White);
Canvas.DrawString(15, 15, "Total RAM: " + ((Cosmos.Core.GCImplementation.GetAvailableRAM() + Cosmos.Core.GCImplementation.GetUsedRAM()) / 1024) + " MB", Color.White);
Canvas.DrawString(15, 15, "Used RAM: " + (Cosmos.Core.GCImplementation.GetUsedRAM() / 1024) + " MB", Color.White);
Canvas.DrawString(15, 15, "Free RAM: " + (Cosmos.Core.GCImplementation.GetAvailableRAM() / 1024) + " MB", Color.White);
Canvas.DrawString(15, 15, "GPU Name: " + new string((sbyte*)Cosmos.Core.VBE.getControllerInfo().oemProductNamePtr), Color.White);
Canvas.DrawString(15, 15, "CPU Speed: " + (Cosmos.Core.CPU.GetCPUCycleSpeed() / 1E+09) + " Ghz", Color.White);



if (Cosmos.System.KeyboardManager.ControlPressed || ShowMenu)
{
    ShowMenu = true;
    Canvas.DrawFilledRectangle(0, 0, 100, Canvas.Font.Default.Height * Modes.Count, Color.FromArgb(100, 25, 25, 25));
    Canvas.DrawFilledRectangle(0, Selected * Canvas.Font.Default.Height, 100, Canvas.Font.Default.Height, Color.DarkOrange);
    for (int I = 0; I < Modes.Count; I++)
    {
        Canvas.DrawString(15, I * Canvas.Font.Default.Height, Modes[I].Columns + "x" + Modes[I].Rows, Color.White);
    }
    if (Cosmos.System.KeyboardManager.TryReadKey(out var Key))
    {
                        if (Key.Key == Cosmos.System.ConsoleKeyEx.UpArrow && Selected != 0)
                        {
                            Selected--;
                        }
                        if (Key.Key == Cosmos.System.ConsoleKeyEx.DownArrow && Selected != Modes.Count - 1)
                        {
                            Selected++;
                        }
                        if (Key.Key == Cosmos.System.ConsoleKeyEx.Enter)
                        {
                            ShowMenu = false;
                            Canvas.Resize(Modes[Selected].Columns, Modes[Selected].Rows);
                            return;
                        }
                    }
                }

                
            bool ShowMenu = false;
            int Selected = 0;
            List<Mode> Modes = new()
            {
                { new(320, 200, (ColorDepth)32) },
                { new(640, 480, (ColorDepth)32) },
                { new(720, 480, (ColorDepth)32) },
                { new(1024, 768, (ColorDepth)32) },
                { new(1280, 720, (ColorDepth)32) },
                { new(1920, 1080, (ColorDepth)32) }
            };

            

                Random Random = new();
                int Octaves = 1; // 1-8
                float[] FNoiseSeed1D = new float[Canvas.Width];
                float[] FPerlinNoise = new float[Canvas.Width];

                for (int I = 0; I < Canvas.Width; I++)
                    FNoiseSeed1D[I] = Random.Next(0, 1);

                while (true)
                {
                    Canvas.Clear();

                    if (Cosmos.System.KeyboardManager.ControlPressed)
                    {
                        if (Octaves == 9)
                            Octaves = 0;
                        else
                            Octaves++;
                    }
                    for (int I = 0; I < Canvas.Width; I++)
                    {
                        float FNoise = 0.0f;
                        float FScale = 1.0f;
                        float FScaleAcc = 0.0f;

                        for (int O = 0; O < Octaves; O++)
                        {
                            int Pitch = Canvas.Width >> O;
                            int Sample1 = (I / Pitch) * Pitch;
                            int Sample2 = (Sample1 + Pitch) % Canvas.Width;

                            float FBlend = (I - Sample1) / Pitch;
                            float Sample = (1.0f - FBlend) * FNoiseSeed1D[Sample1] + FBlend * FNoiseSeed1D[Sample2];
                            FNoise += Sample * FScale;
                            FScaleAcc += FScale;
                            FScale /= 2.0f;
                        }

                        FPerlinNoise[I] = FNoise / FScaleAcc;
                    }

                    for (int X = 0; X < Canvas.Width; X++)
                    {
                        int Y = (int)(-(FPerlinNoise[X] * Canvas.Height / 2.0f) + Canvas.Height / 2.0f);
                        for (int H = Y; H < Canvas.Height / 2; H++)
                            Canvas.SetPixel(X, H, Color.White);
                    }

                    Canvas.Update();
                }

                
            TCP.Start();
            Console.WriteLine("Server started!");
            while (true)
            {
                TCP.AcceptTcpClient().Send(System.Text.Encoding.ASCII.GetBytes(
                    $"HTTP/1.1 200 OK\n" +
                    $"Date: {DateTime.UtcNow:ddd, d MMM yyyy h:mm:ss zz}\n" +
                    $"Server: Cosmos / DevKit(Prism OS)\n" +
                    $"Content - Type: text / html\n" +
                    $"Connection: Closed\n" +
                    "<html><body><h1>Hello, World!</h1></body></html>"));
            }

            

        public uint* ParseTGA(byte[] ptr)
        {
            // 0 = Width, 1 = Height, rest is raw data
            uint* data;
            int i, j, k, x, y, w = (ptr[13] << 8) + ptr[12], h = (ptr[15] << 8) + ptr[14], o = (ptr[11] << 8) + ptr[10];
            int m = ((ptr[1] == 0 ? (ptr[7] >> 3) * ptr[5] : 0) + 18);

            if (w < 1 || h < 1)
            {
                return null;
            }

            data = (uint*)Cosmos.Core.GCImplementation.AllocNewObject((uint)((w * h + 2) * sizeof(uint)));
            if ((int*)data != (uint*)0)
            {
                return null;
            }

            switch (ptr[2])
            {
                case 1:
                    if (ptr[6] != 0 || ptr[4] != 0 || ptr[3] != 0 || (ptr[7] != 24 && ptr[7] != 32))
                    {
                        Cosmos.Core.GCImplementation.Free((uint)data);
                        return null;
                    }
                    for (y = i = 0; y < h; y++)
                    {
                        k = ((o != 0 ? h - y - 1 : y) * w);
                        for (x = 0; x < w; x++)
                        {
                            j = ptr[m + k++] * (ptr[7] >> 3) + 18;
                            data[2 + i++] = (uint)(((ptr[7] == 32 ? ptr[j + 3] : 0xFF) << 24) | (ptr[j + 2] << 16) | (ptr[j + 1] << 8) | ptr[j]);
                        }
                    }
                    break;
                case 2:
                    if (ptr[5] != 0 || ptr[6] != 0 || ptr[1] != 0 || (ptr[16] != 24 && ptr[16] != 32))
                    {
                        Cosmos.Core.GCImplementation.Free((uint)data);
                        return null;
                    }
                    for (y = i = 0; y < h; y++)
                    {
                        j = ((o != 0 ? h - y - 1 : y) * w * (ptr[16] >> 3));
                        for (x = 0; x < w; x++)
                        {
                            data[2 + i++] = (uint)(((ptr[16] == 32 ? ptr[j + 3] : 0xFF) << 24) | (ptr[j + 2] << 16) | (ptr[j + 1] << 8) | ptr[j]);
                            j += ptr[16] >> 3;
                        }
                    }
                    break;
                case 9:
                    if (ptr[6] != 0 || ptr[4] != 0 || ptr[3] != 0 || (ptr[7] != 24 && ptr[7] != 32))
                    {
                        Cosmos.Core.GCImplementation.Free((uint)data);
                        return null;
                    }
                    y = i = 0;
                    for (x = 0; x < w * h && m < ptr.Length;)
                    {
                        k = ptr[m++];
                        if (k > 127)
                        {
                            k -= 127; x += k;
                            j = ptr[m++] * (ptr[7] >> 3) + 18;
                            while (k-- != 0)
                            {
                                if ((i % w) != 0) { i = ((o != 0 ? h - y - 1 : y) * w); y++; }
                                data[2 + i++] = (uint)(((ptr[7] == 32 ? ptr[j + 3] : 0xFF) << 24) | (ptr[j + 2] << 16) | (ptr[j + 1] << 8) | ptr[j]);
                            }
                        }
                        else
                        {
                            k++; x += k;
                            while (k-- != 0)
                            {
                                j = ptr[m++] * (ptr[7] >> 3) + 18;
                                if ((i % w) != 0) { i = ((o != 0 ? h - y - 1 : y) * w); y++; }
                                data[2 + i++] = (uint)(((ptr[7] == 32 ? ptr[j + 3] : 0xFF) << 24) | (ptr[j + 2] << 16) | (ptr[j + 1] << 8) | ptr[j]);
                            }
                        }
                    }
                    break;
                case 10:
                    if (ptr[5] != 0 || ptr[6] != 0 || ptr[1] != 0 || (ptr[16] != 24 && ptr[16] != 32))
                    {
                        Cosmos.Core.GCImplementation.Free((uint)data);
                        return null;
                    }
                    y = i = 0;
                    for (x = 0; x < w * h && m < ptr.Length;)
                    {
                        k = ptr[m++];
                        if (k > 127)
                        {
                            k -= 127; x += k;
                            while (k-- != 0)
                            {
                                if ((i % w) != 0)
                                {
                                    i = ((o != 0 ? h - y - 1 : y) * w);
                                    y++;
                                }
                                data[2 + i++] = (uint)(((ptr[16] == 32 ? ptr[m + 3] : 0xFF) << 24) | (ptr[m + 2] << 16) | (ptr[m + 1] << 8) | ptr[m]);
                            }
                            m += ptr[16] >> 3;
                        }
                        else
                        {
                            k++; x += k;
                            while (k-- != 0)
                            {
                                if ((i % w) == 0)
                                {
                                    i = ((o != 0 ? h - y - 1 : y) * w);
                                    y++;
                                }
                                data[2 + i++] = (uint)(((ptr[16] == 32 ? ptr[m + 3] : 0xFF) << 24) | (ptr[m + 2] << 16) | (ptr[m + 1] << 8) | ptr[m]);
                                m += ptr[16] >> 3;
                            }
                        }
                    }
                    break;
                default:
                    Cosmos.Core.GCImplementation.Free((uint)data);
                    return null;
            }
            data[0] = (uint)w;
            data[1] = (uint)h;
            return data;
        }

         // Move the window to the correct position
                        Window.X = (int)Mouse.X - ((int)Mouse.X - Window.X);
                        Window.Y = (int)Mouse.Y - ((int)Mouse.Y - Window.Y);